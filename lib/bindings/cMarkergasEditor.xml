<?xml version="1.0"?>
<bindings xmlns="http://www.mozilla.org/xbl" xmlns:xbl="http://www.mozilla.org/xbl"
	xmlns:html="http://www.w3.org/1999/xhtml" xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
	<binding id="cProductField" extends="form.cField#cAbstractField">
		<implementation>
			<field name="mValue">null</field>
			<field name="mProductFields">null</field>
			
			<constructor><![CDATA[
				wCore.debug('cProductField.constructor');
				this.setAttribute("valid", "true");
			]]></constructor>
					
			<method name="setInitialValue">
				<parameter name="val" />
				<body><![CDATA[
					var fval = this.fixString(val);
					if (fval != '')
					{
						this.mValue = wCore.parseJSON(fval);
						this.setAttribute("initialvalue", wCore.stringifyJSON(this.mValue));
					}
					else
					{
						this.mValue = null;
						this.setAttribute("initialvalue", '');
					}
					
					if (this.modified)
					{
						this.removeAttribute("modified");
						this.dispatchFieldEvent('fieldRestored');						
					}
					var errorMessage = this.checkRequired(fval);
					this.setValidity(errorMessage);
					this.setInitialValueInternals();
				]]></body>
			</method>
		
			<method name="setInitialValueInternals">
				<body><![CDATA[
					var ini = this.initialvalue;
					var values = (ini != '') ? wCore.parseJSON(ini) : {};
					if (this.mProductFields != null)
					{
						var ordonedIni = {};
						for (var modelName in this.mProductFields)
						{
							if (modelName in values)
							{
								this.mProductFields[modelName].setInitialValue(values[modelName]);
								ordonedIni[modelName] = values[modelName];
							}
							else
							{
								this.mProductFields[modelName].setInitialValue('');
							}
						}
						ini = wCore.stringifyJSON(ordonedIni);
						this.setAttribute("initialvalue", (ini == '{}') ? '' : ini);
					}
				]]></body>
			</method>
				
			<property name="value">
				<getter><![CDATA[
					if (this.mProductFields != null)
					{
						var values = {};
						for (var modelName in this.mProductFields)
						{
							var pval = this.mProductFields[modelName].value;
							if (pval != '') {values[modelName] = pval;}
						}
						values = wCore.stringifyJSON(values);
						return (values == '{}') ? '' : values;
					}
					return '';
				]]></getter>
				<setter><![CDATA[
					if (this.mProductFields == null) {return;}
					var fval = this.fixString(val);
					var values = (fval != '') ? wCore.parseJSON(fval) : {};
					for (var modelName in this.mProductFields)
					{
						if (modelName in values)
						{
							this.mProductFields[modelName].value = values[modelName];
						}
						else
						{
							this.mProductFields[modelName].value = '';
						}
					}
					this.dispatchValueChanged(fval);
				]]></setter>
			</property>
							
			<method name="checkValidity">
				<parameter name="val" />
				<body><![CDATA[
					return null;
				]]></body>
			</method>
			
			<method name="checkIsModified">
				<body><![CDATA[
					return this.initialvalue != this.value;
				]]></body>
			</method>
			
			<method name="setProductInfos">
				<parameter name="data" />
				<body><![CDATA[
					var ini = this.initialvalue;
					if (ini != '')
					{
						ini = wCore.parseJSON(ini);
					}
					else
					{
						ini = {};
					}
					this.mProductFields = {};
					for (var modelName in data)
					{
						var rowData = data[modelName];
						var id = 'markergas_markergas_productname_' + rowData.module + '_' + rowData.document;	
						var cfield = document.getElementById(id);		
						if (cfield == null)
						{
							var row = document.createElement('row');
							var clabel = document.createElement('clabel');
							clabel.setAttribute('control', id);
							clabel.setAttribute('value', "${transui:m.markergas.document.markergas.productname,ucf,js} ("+ rowData.label + ")" );
							row.appendChild(clabel);
							cfield = document.createElement('cfield');
							cfield.setAttribute('id', id);
							cfield.setAttribute('anonid', modelName);
							cfield.setAttribute('name', 'productname_' + rowData.module + '_' + rowData.document);
							cfield.setAttribute('fieldtype', 'longtext');
							cfield.setAttribute('hidehelp', 'true');
							cfield.setAttribute('class', 'template');
							row.appendChild(cfield);
							this.appendChild(row);
							
							for (var subname in rowData.infos)
							{
								if (rowData.infos[subname] != '')
								{
									cfield.addSubstitution(subname, '{' + rowData.infos[subname] + '}');
								}
								else
								{
									cfield.addSubstitution(subname, '');
								}
							}
						}
						this.mProductFields[modelName] = cfield;
					}

					this.setInitialValueInternals();
				]]></body>
			</method>
		</implementation>
		<handlers>
			<handler event="fieldModified"><![CDATA[
				this.dispatchValueChanged(null);
			]]></handler>
			<handler event="fieldRestored"><![CDATA[
				this.dispatchValueChanged(null);
			]]></handler>
		</handlers>
		<content>
			<xul:grid flex="1">
				<xul:columns>
					<xul:column />
					<xul:column flex="1" />
				</xul:columns>
				<xul:rows anonid="rows">
					<children />
				</xul:rows>
			</xul:grid>
		</content>
	</binding>
</bindings>
